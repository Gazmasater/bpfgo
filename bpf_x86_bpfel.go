// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfConnInfoT struct {
	Pid     uint32
	SrcIp   uint32
	DstIp   uint32
	Addrlen uint32
	Fd      uint32
	Sport   uint16
	Dport   uint16
	Comm    [64]int8
}

type bpfSockaddr struct {
	SaFamily  uint16
	SaDataMin [14]int8
}

type bpfSockaddrIn struct {
	SinFamily uint16
	SinPort   uint16
	SinAddr   struct{ S_addr uint32 }
	Pad       [8]uint8
}

type bpfTraceInfo struct {
	Pid   uint32
	SrcIp uint32
	DstIp uint32
	Sport uint16
	Dport uint16
	Comm  [64]int8
}

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	TraceAccept4Enter  *ebpf.ProgramSpec `ebpf:"trace_accept4_enter"`
	TraceAccept4Exit   *ebpf.ProgramSpec `ebpf:"trace_accept4_exit"`
	TraceBindEnter     *ebpf.ProgramSpec `ebpf:"trace_bind_enter"`
	TraceBindExit      *ebpf.ProgramSpec `ebpf:"trace_bind_exit"`
	TraceConnectEnter  *ebpf.ProgramSpec `ebpf:"trace_connect_enter"`
	TraceConnectExit   *ebpf.ProgramSpec `ebpf:"trace_connect_exit"`
	TraceRecvfromEnter *ebpf.ProgramSpec `ebpf:"trace_recvfrom_enter"`
	TraceRecvfromExit  *ebpf.ProgramSpec `ebpf:"trace_recvfrom_exit"`
	TraceSendtoEnter   *ebpf.ProgramSpec `ebpf:"trace_sendto_enter"`
	TraceSendtoExit    *ebpf.ProgramSpec `ebpf:"trace_sendto_exit"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	AddrMap     *ebpf.MapSpec `ebpf:"addr_map"`
	BindMap     *ebpf.MapSpec `ebpf:"bind_map"`
	ConnInfoMap *ebpf.MapSpec `ebpf:"conn_info_map"`
	TraceEvents *ebpf.MapSpec `ebpf:"trace_events"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	AddrMap     *ebpf.Map `ebpf:"addr_map"`
	BindMap     *ebpf.Map `ebpf:"bind_map"`
	ConnInfoMap *ebpf.Map `ebpf:"conn_info_map"`
	TraceEvents *ebpf.Map `ebpf:"trace_events"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.AddrMap,
		m.BindMap,
		m.ConnInfoMap,
		m.TraceEvents,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	TraceAccept4Enter  *ebpf.Program `ebpf:"trace_accept4_enter"`
	TraceAccept4Exit   *ebpf.Program `ebpf:"trace_accept4_exit"`
	TraceBindEnter     *ebpf.Program `ebpf:"trace_bind_enter"`
	TraceBindExit      *ebpf.Program `ebpf:"trace_bind_exit"`
	TraceConnectEnter  *ebpf.Program `ebpf:"trace_connect_enter"`
	TraceConnectExit   *ebpf.Program `ebpf:"trace_connect_exit"`
	TraceRecvfromEnter *ebpf.Program `ebpf:"trace_recvfrom_enter"`
	TraceRecvfromExit  *ebpf.Program `ebpf:"trace_recvfrom_exit"`
	TraceSendtoEnter   *ebpf.Program `ebpf:"trace_sendto_enter"`
	TraceSendtoExit    *ebpf.Program `ebpf:"trace_sendto_exit"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.TraceAccept4Enter,
		p.TraceAccept4Exit,
		p.TraceBindEnter,
		p.TraceBindExit,
		p.TraceConnectEnter,
		p.TraceConnectExit,
		p.TraceRecvfromEnter,
		p.TraceRecvfromExit,
		p.TraceSendtoEnter,
		p.TraceSendtoExit,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
