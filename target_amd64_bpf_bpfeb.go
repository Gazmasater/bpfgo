// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type target_amd64_bpfConnInfoT struct {
	Pid     uint32
	SrcIp   uint32
	DstIp   uint32
	Addrlen uint32
	Sport   uint16
	Dport   uint16
	Comm    [128]int8
}

type target_amd64_bpfTraceInfo struct {
	Pid   uint32
	SrcIp uint32
	DstIp uint32
	Sport uint16
	Dport uint16
	Comm  [128]int8
}

// loadTarget_amd64_bpf returns the embedded CollectionSpec for target_amd64_bpf.
func loadTarget_amd64_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Target_amd64_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load target_amd64_bpf: %w", err)
	}

	return spec, err
}

// loadTarget_amd64_bpfObjects loads target_amd64_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*target_amd64_bpfObjects
//	*target_amd64_bpfPrograms
//	*target_amd64_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTarget_amd64_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTarget_amd64_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// target_amd64_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type target_amd64_bpfSpecs struct {
	target_amd64_bpfProgramSpecs
	target_amd64_bpfMapSpecs
	target_amd64_bpfVariableSpecs
}

// target_amd64_bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type target_amd64_bpfProgramSpecs struct {
	TraceAccept4Enter  *ebpf.ProgramSpec `ebpf:"trace_accept4_enter"`
	TraceAccept4Exit   *ebpf.ProgramSpec `ebpf:"trace_accept4_exit"`
	TraceRecvfromEnter *ebpf.ProgramSpec `ebpf:"trace_recvfrom_enter"`
	TraceRecvfromExit  *ebpf.ProgramSpec `ebpf:"trace_recvfrom_exit"`
	TraceSendtoEnter   *ebpf.ProgramSpec `ebpf:"trace_sendto_enter"`
	TraceSendtoExit    *ebpf.ProgramSpec `ebpf:"trace_sendto_exit"`
}

// target_amd64_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type target_amd64_bpfMapSpecs struct {
	AddrMap     *ebpf.MapSpec `ebpf:"addr_map"`
	ConnInfoMap *ebpf.MapSpec `ebpf:"conn_info_map"`
	StatusMap   *ebpf.MapSpec `ebpf:"status_map"`
	TraceEvents *ebpf.MapSpec `ebpf:"trace_events"`
}

// target_amd64_bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type target_amd64_bpfVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// target_amd64_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTarget_amd64_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type target_amd64_bpfObjects struct {
	target_amd64_bpfPrograms
	target_amd64_bpfMaps
	target_amd64_bpfVariables
}

func (o *target_amd64_bpfObjects) Close() error {
	return _Target_amd64_bpfClose(
		&o.target_amd64_bpfPrograms,
		&o.target_amd64_bpfMaps,
	)
}

// target_amd64_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTarget_amd64_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type target_amd64_bpfMaps struct {
	AddrMap     *ebpf.Map `ebpf:"addr_map"`
	ConnInfoMap *ebpf.Map `ebpf:"conn_info_map"`
	StatusMap   *ebpf.Map `ebpf:"status_map"`
	TraceEvents *ebpf.Map `ebpf:"trace_events"`
}

func (m *target_amd64_bpfMaps) Close() error {
	return _Target_amd64_bpfClose(
		m.AddrMap,
		m.ConnInfoMap,
		m.StatusMap,
		m.TraceEvents,
	)
}

// target_amd64_bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTarget_amd64_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type target_amd64_bpfVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// target_amd64_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTarget_amd64_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type target_amd64_bpfPrograms struct {
	TraceAccept4Enter  *ebpf.Program `ebpf:"trace_accept4_enter"`
	TraceAccept4Exit   *ebpf.Program `ebpf:"trace_accept4_exit"`
	TraceRecvfromEnter *ebpf.Program `ebpf:"trace_recvfrom_enter"`
	TraceRecvfromExit  *ebpf.Program `ebpf:"trace_recvfrom_exit"`
	TraceSendtoEnter   *ebpf.Program `ebpf:"trace_sendto_enter"`
	TraceSendtoExit    *ebpf.Program `ebpf:"trace_sendto_exit"`
}

func (p *target_amd64_bpfPrograms) Close() error {
	return _Target_amd64_bpfClose(
		p.TraceAccept4Enter,
		p.TraceAccept4Exit,
		p.TraceRecvfromEnter,
		p.TraceRecvfromExit,
		p.TraceSendtoEnter,
		p.TraceSendtoExit,
	)
}

func _Target_amd64_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed target_amd64_bpf_bpfeb.o
var _Target_amd64_bpfBytes []byte
