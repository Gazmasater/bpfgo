// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type traceConnInfoT struct {
	Pid     uint32
	SrcIp   uint32
	DstIp   uint32
	Addrlen uint32
	Sport   uint16
	Dport   uint16
	Comm    [16]int8
}

// loadTrace returns the embedded CollectionSpec for trace.
func loadTrace() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TraceBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load trace: %w", err)
	}

	return spec, err
}

// loadTraceObjects loads trace and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*traceObjects
//	*tracePrograms
//	*traceMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTraceObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTrace()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// traceSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type traceSpecs struct {
	traceProgramSpecs
	traceMapSpecs
	traceVariableSpecs
}

// traceProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type traceProgramSpecs struct {
	TraceSendtoEnter *ebpf.ProgramSpec `ebpf:"trace_sendto_enter"`
	TraceSendtoExit  *ebpf.ProgramSpec `ebpf:"trace_sendto_exit"`
}

// traceMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type traceMapSpecs struct {
	AddrMap     *ebpf.MapSpec `ebpf:"addr_map"`
	ConnInfoMap *ebpf.MapSpec `ebpf:"conn_info_map"`
	Events      *ebpf.MapSpec `ebpf:"events"`
}

// traceVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type traceVariableSpecs struct {
}

// traceObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type traceObjects struct {
	tracePrograms
	traceMaps
	traceVariables
}

func (o *traceObjects) Close() error {
	return _TraceClose(
		&o.tracePrograms,
		&o.traceMaps,
	)
}

// traceMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type traceMaps struct {
	AddrMap     *ebpf.Map `ebpf:"addr_map"`
	ConnInfoMap *ebpf.Map `ebpf:"conn_info_map"`
	Events      *ebpf.Map `ebpf:"events"`
}

func (m *traceMaps) Close() error {
	return _TraceClose(
		m.AddrMap,
		m.ConnInfoMap,
		m.Events,
	)
}

// traceVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type traceVariables struct {
}

// tracePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTraceObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracePrograms struct {
	TraceSendtoEnter *ebpf.Program `ebpf:"trace_sendto_enter"`
	TraceSendtoExit  *ebpf.Program `ebpf:"trace_sendto_exit"`
}

func (p *tracePrograms) Close() error {
	return _TraceClose(
		p.TraceSendtoEnter,
		p.TraceSendtoExit,
	)
}

func _TraceClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed trace_bpfel.o
var _TraceBytes []byte
