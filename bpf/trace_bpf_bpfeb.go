// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package load

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type trace_bpfConnInfoT struct {
	Pid     uint32
	SrcIp   uint32
	DstIp   uint32
	Addrlen uint32
	Sport   uint16
	Dport   uint16
	Comm    [16]int8
}

// loadTrace_bpf returns the embedded CollectionSpec for trace_bpf.
func loadTrace_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Trace_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load trace_bpf: %w", err)
	}

	return spec, err
}

// loadTrace_bpfObjects loads trace_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*trace_bpfObjects
//	*trace_bpfPrograms
//	*trace_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTrace_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTrace_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// trace_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_bpfSpecs struct {
	trace_bpfProgramSpecs
	trace_bpfMapSpecs
	trace_bpfVariableSpecs
}

// trace_bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_bpfProgramSpecs struct {
	TraceSendtoEnter *ebpf.ProgramSpec `ebpf:"trace_sendto_enter"`
	TraceSendtoExit  *ebpf.ProgramSpec `ebpf:"trace_sendto_exit"`
}

// trace_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_bpfMapSpecs struct {
	AddrMap     *ebpf.MapSpec `ebpf:"addr_map"`
	ConnInfoMap *ebpf.MapSpec `ebpf:"conn_info_map"`
	TraceEvents *ebpf.MapSpec `ebpf:"trace_events"`
}

// trace_bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_bpfVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// trace_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTrace_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_bpfObjects struct {
	trace_bpfPrograms
	trace_bpfMaps
	trace_bpfVariables
}

func (o *trace_bpfObjects) Close() error {
	return _Trace_bpfClose(
		&o.trace_bpfPrograms,
		&o.trace_bpfMaps,
	)
}

// trace_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTrace_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_bpfMaps struct {
	AddrMap     *ebpf.Map `ebpf:"addr_map"`
	ConnInfoMap *ebpf.Map `ebpf:"conn_info_map"`
	TraceEvents *ebpf.Map `ebpf:"trace_events"`
}

func (m *trace_bpfMaps) Close() error {
	return _Trace_bpfClose(
		m.AddrMap,
		m.ConnInfoMap,
		m.TraceEvents,
	)
}

// trace_bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTrace_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_bpfVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// trace_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTrace_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_bpfPrograms struct {
	TraceSendtoEnter *ebpf.Program `ebpf:"trace_sendto_enter"`
	TraceSendtoExit  *ebpf.Program `ebpf:"trace_sendto_exit"`
}

func (p *trace_bpfPrograms) Close() error {
	return _Trace_bpfClose(
		p.TraceSendtoEnter,
		p.TraceSendtoExit,
	)
}

func _Trace_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed trace_bpf_bpfeb.o
var _Trace_bpfBytes []byte
